name: Pipeline de CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: "18"

jobs:
  # Job 1: Validação de qualidade de código (lint)
  code-quality:
    name: Análise de Qualidade do Código
    runs-on: ubuntu-latest

    steps:
      - name: Fazer checkout do código
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Instalar dependências
        run: npm ci

      - name: Executar lint do código
        run: |
          if [ -f .eslintrc.js ] || [ -f .eslintrc.json ] || [ -f eslint.config.js ] || [ -f eslint.config.cjs ]; then
            npm run lint
          else
            echo "ESLint não configurado, pulando verificação de lint"
          fi

  # Job 2: Testes unitários e de integração com Docker + Postgres
  tests:
    name: Executar Testes
    runs-on: ubuntu-latest
    needs: code-quality

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: supersecurepassword
          POSTGRES_DB: davinci_pets
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Fazer checkout do código
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Instalar dependências
        run: npm ci

      - name: Gerar Prisma Client
        run: npm run prisma:generate
        env:
          DATABASE_URL: postgresql://postgres:supersecurepassword@localhost:5432/davinci_pets?schema=public

      - name: Rodar migrações no banco de teste
        run: npm run prisma:migrate:deploy
        env:
          DATABASE_URL: postgresql://postgres:supersecurepassword@localhost:5432/davinci_pets?schema=public

      - name: Executar testes unitários
        run: npm run test:unit
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:supersecurepassword@localhost:5432/davinci_pets?schema=public

      - name: Executar testes de integração
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:supersecurepassword@localhost:5432/davinci_pets?schema=public

  # Job 3: Build da aplicação
  build:
    name: Build da Aplicação
    runs-on: ubuntu-latest
    needs: [code-quality, tests]

    steps:
      - name: Fazer checkout do código
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Instalar dependências
        run: npm ci

      - name: Fazer build da aplicação
        run: |
          if npm run build 2>/dev/null; then
            echo "Build realizado com sucesso usando npm run build"
          else
            echo "npm run build não disponível, usando compilador TypeScript diretamente"
            npx tsc
          fi

      - name: Verificar arquivos de build
        run: |
          if [ -d "dist" ]; then
            echo "Diretório dist criado com sucesso"
            ls -la dist/
          else
            echo "Diretório dist não encontrado"
            exit 1
          fi

  # Job 4: Build e teste do Docker
  docker-build:
    name: Build Docker
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Fazer checkout do código
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build da imagem Docker
        run: docker build -t abp-2025-back:test .

      - name: Testar imagem Docker
        run: |
          docker run -d --name test-container \
            -e PORT=3000 \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=supersecurepassword \
            -e POSTGRES_DB=davinci_pets \
            -e POSTGRES_HOST=localhost \
            -e POSTGRES_PORT=5432 \
            -e DATABASE_URL=postgresql://postgres:supersecurepassword@postgres:5432/davinci_pets?schema=public \
            -p 3000:3000 \
            abp-2025-back:test

          # Aguardar container iniciar
          sleep 10

          docker ps | grep test-container || exit 1
          docker logs test-container

          docker stop test-container
          docker rm test-container
